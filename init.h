#ifndef IN_H
#define IN_H
#include "embedding.h"
 
void final_weights_word(Matrix& m){
 double weights_output_final[36][23] = {      //linear layer weights for decoder module 6*6
    {0.23, 0.45, 0.67, 0.89, 0.12, 0.34, 0.56, 0.78, 0.90, 0.11, 0.22, 0.33, 0.44, 0.55, 0.66, 0.77, 0.88, 0.99, 0.10, 0.21, 0.32, 0.43, 0.54},
    {0.65, 0.76, 0.87, 0.98, 0.09, 0.20, 0.31, 0.42, 0.53, 0.64, 0.75, 0.86, 0.97, 0.08, 0.19, 0.30, 0.41, 0.52, 0.63, 0.74, 0.85, 0.96, 0.07},
    {0.18, 0.29, 0.40, 0.51, 0.62, 0.73, 0.84, 0.95, 0.06, 0.17, 0.28, 0.39, 0.50, 0.61, 0.72, 0.83, 0.94, 0.05, 0.16, 0.27, 0.38, 0.49, 0.60},
    {0.71, 0.82, 0.93, 0.04, 0.15, 0.26, 0.37, 0.48, 0.59, 0.70, 0.81, 0.92, 0.03, 0.14, 0.25, 0.36, 0.47, 0.58, 0.69, 0.80, 0.91, 0.02, 0.13},
    {0.24, 0.35, 0.46, 0.57, 0.68, 0.79, 0.90, 0.01, 0.12, 0.23, 0.34, 0.45, 0.56, 0.67, 0.78, 0.89, 0.00, 0.11, 0.22, 0.33, 0.44, 0.55, 0.66},
    {0.77, 0.88, 0.99, 0.10, 0.21, 0.32, 0.43, 0.54, 0.65, 0.76, 0.87, 0.98, 0.09, 0.20, 0.31, 0.42, 0.53, 0.64, 0.75, 0.86, 0.97, 0.08, 0.19},
    {0.30, 0.41, 0.52, 0.63, 0.74, 0.85, 0.96, 0.07, 0.18, 0.29, 0.40, 0.51, 0.62, 0.73, 0.84, 0.95, 0.06, 0.17, 0.28, 0.39, 0.50, 0.61, 0.72},
    {0.83, 0.94, 0.05, 0.16, 0.27, 0.38, 0.49, 0.60, 0.71, 0.82, 0.93, 0.04, 0.15, 0.26, 0.37, 0.48, 0.59, 0.70, 0.81, 0.92, 0.03, 0.14, 0.25},
    {0.36, 0.47, 0.58, 0.69, 0.80, 0.91, 0.02, 0.13, 0.24, 0.35, 0.46, 0.57, 0.68, 0.79, 0.90, 0.01, 0.12, 0.23, 0.34, 0.45, 0.56, 0.67, 0.78},
    {0.89, 0.00, 0.11, 0.22, 0.33, 0.44, 0.55, 0.66, 0.77, 0.88, 0.99, 0.10, 0.21, 0.32, 0.43, 0.54, 0.65, 0.76, 0.87, 0.98, 0.09, 0.20, 0.31},
    {0.42, 0.53, 0.64, 0.75, 0.86, 0.97, 0.08, 0.19, 0.30, 0.41, 0.52, 0.63, 0.74, 0.85, 0.96, 0.07, 0.18, 0.29, 0.40, 0.51, 0.62, 0.73, 0.84},
    {0.95, 0.06, 0.17, 0.28, 0.39, 0.50, 0.61, 0.72, 0.83, 0.94, 0.05, 0.16, 0.27, 0.38, 0.49, 0.60, 0.71, 0.82, 0.93, 0.04, 0.15, 0.26, 0.37},
    {0.48, 0.59, 0.70, 0.81, 0.92, 0.03, 0.14, 0.25, 0.36, 0.47, 0.58, 0.69, 0.80, 0.91, 0.02, 0.13, 0.24, 0.35, 0.46, 0.57, 0.68, 0.79, 0.90},
    {0.01, 0.12, 0.23, 0.34, 0.45, 0.56, 0.67, 0.78, 0.89, 0.00, 0.11, 0.22, 0.33, 0.44, 0.55, 0.66, 0.77, 0.88, 0.99, 0.10, 0.21, 0.32, 0.43},
    {0.54, 0.65, 0.76, 0.87, 0.98, 0.09, 0.20, 0.31, 0.42, 0.53, 0.64, 0.75, 0.86, 0.97, 0.08, 0.19, 0.30, 0.41, 0.52, 0.63, 0.74, 0.85, 0.96},
    {0.07, 0.18, 0.29, 0.40, 0.51, 0.62, 0.73, 0.84, 0.95, 0.06, 0.17, 0.28, 0.39, 0.50, 0.61, 0.72, 0.83, 0.94, 0.05, 0.16, 0.27, 0.38, 0.49},
    {0.60, 0.71, 0.82, 0.93, 0.04, 0.15, 0.26, 0.37, 0.48, 0.59, 0.70, 0.81, 0.92, 0.03, 0.14, 0.25, 0.36, 0.47, 0.58, 0.69, 0.80, 0.91, 0.02},
    {0.13, 0.24, 0.35, 0.46, 0.57, 0.68, 0.79, 0.90, 0.01, 0.12, 0.23, 0.34, 0.45, 0.56, 0.67, 0.78, 0.89, 0.00, 0.11, 0.22, 0.33, 0.44, 0.55},
    {0.66, 0.77, 0.88, 0.99, 0.10, 0.21, 0.32, 0.43, 0.54, 0.65, 0.76, 0.87, 0.98, 0.09, 0.20, 0.31, 0.42, 0.53, 0.64, 0.75, 0.86, 0.97, 0.08},
    {0.19, 0.30, 0.41, 0.52, 0.63, 0.74, 0.85, 0.96, 0.07, 0.18, 0.29, 0.40, 0.51, 0.62, 0.73, 0.84, 0.95, 0.06, 0.17, 0.28, 0.39, 0.50, 0.61},
    {0.72, 0.83, 0.94, 0.05, 0.16, 0.27, 0.38, 0.49, 0.60, 0.71, 0.82, 0.93, 0.04, 0.15, 0.26, 0.37, 0.48, 0.59, 0.70, 0.81, 0.92, 0.03, 0.14},
    {0.25, 0.36, 0.47, 0.58, 0.69, 0.80, 0.91, 0.02, 0.13, 0.24, 0.35, 0.46, 0.57, 0.68, 0.79, 0.90, 0.01, 0.12, 0.23, 0.34, 0.45, 0.56, 0.67},
    {0.78, 0.89, 0.00, 0.11, 0.22, 0.33, 0.44, 0.55, 0.66, 0.77, 0.88, 0.99, 0.10, 0.21, 0.32, 0.43, 0.54, 0.65, 0.76, 0.87, 0.98, 0.09, 0.20},
    {0.31, 0.42, 0.53, 0.64, 0.75, 0.86, 0.97, 0.08, 0.19, 0.30, 0.41, 0.52, 0.63, 0.74, 0.85, 0.96, 0.07, 0.18, 0.29, 0.40, 0.51, 0.62, 0.73},
    {0.84, 0.95, 0.06, 0.17, 0.28, 0.39, 0.50, 0.61, 0.72, 0.83, 0.94, 0.05, 0.16, 0.27, 0.38, 0.49, 0.60, 0.71, 0.82, 0.93, 0.04, 0.15, 0.26},
    {0.37, 0.48, 0.59, 0.70, 0.81, 0.92, 0.03, 0.14, 0.25, 0.36, 0.47, 0.58, 0.69, 0.80, 0.91, 0.02, 0.13, 0.24, 0.35, 0.46, 0.57, 0.68, 0.79},
    {0.90, 0.01, 0.12, 0.23, 0.34, 0.45, 0.56, 0.67, 0.78, 0.89, 0.00, 0.11, 0.22, 0.33, 0.44, 0.55, 0.66, 0.77, 0.88, 0.99, 0.10, 0.21, 0.32},
    {0.43, 0.54, 0.65, 0.76, 0.87, 0.98, 0.09, 0.20, 0.31, 0.42, 0.53, 0.64, 0.75, 0.86, 0.97, 0.08, 0.19, 0.30, 0.41, 0.52, 0.63, 0.74, 0.85},
    {0.96, 0.07, 0.18, 0.29, 0.40, 0.51, 0.62, 0.73, 0.84, 0.95, 0.06, 0.17, 0.28, 0.39, 0.50, 0.61, 0.72, 0.83, 0.94, 0.05, 0.16, 0.27, 0.38},
    {0.49, 0.60, 0.71, 0.82, 0.93, 0.04, 0.15, 0.26, 0.37, 0.48, 0.59, 0.70, 0.81, 0.92, 0.03, 0.14, 0.25, 0.36, 0.47, 0.58, 0.69, 0.80, 0.91},
    {0.02, 0.13, 0.24, 0.35, 0.46, 0.57, 0.68, 0.79, 0.90, 0.01, 0.12, 0.23, 0.34, 0.45, 0.56, 0.67, 0.78, 0.89, 0.00, 0.11, 0.22, 0.33, 0.44},
    {0.55, 0.66, 0.77, 0.88, 0.99, 0.10, 0.21, 0.32, 0.43, 0.54, 0.65, 0.76, 0.87, 0.98, 0.09, 0.20, 0.31, 0.42, 0.53, 0.64, 0.75, 0.86, 0.97},
    {0.08, 0.19, 0.30, 0.41, 0.52, 0.63, 0.74, 0.85, 0.96, 0.07, 0.18, 0.29, 0.40, 0.51, 0.62, 0.73, 0.84, 0.95, 0.06, 0.17, 0.28, 0.39, 0.50},
    {0.61, 0.72, 0.83, 0.94, 0.05, 0.16, 0.27, 0.38, 0.49, 0.60, 0.71, 0.82, 0.93, 0.04, 0.15, 0.26, 0.37, 0.48, 0.59, 0.70, 0.81, 0.92, 0.03},
    {0.14, 0.25, 0.36, 0.47, 0.58, 0.69, 0.80, 0.91, 0.02, 0.13, 0.24, 0.35, 0.46, 0.57, 0.68, 0.79, 0.90, 0.01, 0.12, 0.23, 0.34, 0.45, 0.56},
    {0.67, 0.78, 0.89, 0.00, 0.11, 0.22, 0.33, 0.44, 0.55, 0.66, 0.77, 0.88, 0.99, 0.10, 0.21, 0.32, 0.43, 0.54, 0.65, 0.76, 0.87, 0.98, 0.09}
     };


    

    for (int i = 0; i < 36; i++) {
        for (int j = 0; j < 23; j++) {
            m.weights_output_final_linear[i][j] = weights_output_final[i][j];
        }
    }

}

#endif